h2. Overview

Today, it is not obvious how to apply version control to manage the resources in an Enonic CMS project. The Enonic Resource Tool is a tool to easen this task.

h3. Quickstart

1) Install gradle, one of the following:
* Windows: Download and install gradle from "gradle.org":http://www.gradle.org
* MAC: Install using "macports":http://macports.org or "brew":http://mxcl.github.com/homebrew/

2) In you project directory, create a build.gradle file based on the sample-build.gradle
3) Run "gradle tasks" to see available tasks
4) run "gradle backupTest" to create local backup of test-server
5) run "gradle syncLocal" to fetch test-server to local disk

h3. ERT Workflow

A typical flow using ERT will be:

*Development*
1) Check out resources from version control to local disk
2) Check that development environment is up to date
3) Make changes to local files, apply changes to development environment as you go
4) Check in all changes to version control

*Test*
5) Check out resources to local disk
6) Run diff-task local -> test, verify changes
7) Run sync-task local -> test

*Prod*
8) Run backup-task to backup production to local disk
9) Check out resources to local disk
10) Run diff-task local -> test, verify changes
11) Run sync-task local -> prod

h2. Configuration


h2. Overview

All configurations are done in the {{build.gradle}} file. The build.gradle file should be a valid gradle config file.

The config file should contain
* Includes
* Ert properties
* Locations
* Tasks

h2. Includes

You need to include the ERTPlugin. The plugin is in the enonic.repo:

{code}
apply plugin: 'ert'

  
buildscript {
    repositories {
        mavenRepo urls: 'http://repo.enonic.com/maven'
    }
    dependencies {
        classpath 'com.enonic.cms.tools:ert-gradle-plugin:1.0-SNAPSHOT'
    }
}

project.ERTSync = com.enonic.ert.tasks.ERTSync
project.ERTDiff = com.enonic.ert.tasks.ERTDiff
project.ERTNukeCache = com.enonic.ert.tasks.ERTNukeCache
project.ERTCopy = com.enonic.ert.tasks.ERTCopy
project.ERTBackup = com.enonic.ert.tasks.ERTBackup

{code}


h2. Ert Properties

All configuration properties should recide inside a block named "ert"

h3. backupUrl

The url to which backups should be stored. 

h3. cacheUrl

The url where caches should be stored.

h3. Example ert
{noformat}
ert {
    cacheUrl = "file://Users/rmh/Dev/Workspace/Java/LABS/.cache"
    backupUrl = "file://Users/rmh/Dev/Workspace/Java/LABS/.backup"
}
{noformat}



h2. Locations

Locations are the core of the ERT configuration. A locations should be a Apache Commons VFS 2.0 valid URI

h3. Local Files
Provides access to the files on the local physical file system.

*URI Format*
{{[file://] absolute-path}}

*Example:*
{noformat}
file://Users/rmh/Dev/Workspace/Java/Enonic/xslt/packages_4_5
{noformat}

h3. Webdav
Provides access to files on a WebDAV server.

*URI Format*
{{webdav://[ username [: password ]@] hostname [: port ][ absolute-path ]}}

*Example:*
{noformat}webdav://admin:password@vtnode1:8180/cms-commando-unstable-packages/dav{noformat}

h3. FTP
Provides access to the files on an FTP server.

*URI Format*
{{ftp://[ username [: password ]@] hostname [: port ][ absolute-path ]}}

*Examples*
{noformat}ftp://myusername:mypassword@somehost/pub/downloads/somefile.tgz{noformat}

h3. Other

See http://commons.apache.org/vfs/filesystems.html

* HTTP and HTTPS
* SFTP
* Temporary Files
* Zip, Jar and Tar (uncompressed, tgz or tbz2)
* gzip and bzip2
* res
* ram
* mime

h2. Location Properties

A number of properties can be set on a location 

h3. Excludes

|| Property name || Descr
| excludes | Defines a set of folders to exclude when considering files, e.g for diff or copy.

*Examples*

{noformat}
def excludeStatics = [
        "/_public",
        "/features",
        "/shared"
]

    local {
        url = "file://Users/rmh/Dev/Workspace/Java/Enonic/xslt/packages_4_6"
        excludes = excludeStatics
    }

{noformat}


h3. Caching

|| Property name || Descr 
| cacheLocal | Use a local cached version of the location. The cache will be updated after one hour by default, or could be manually nuked by using the ERTNuke-task

*Examples*

{noformat}
   remote {
        url = "webdav://admin:password@vtnode1:8180/cms-commando-unstable-packages/dav"
        cacheLocal = true
    }

{noformat}

h2. Tasks

There are a number of predefined task-types in ERT that could be extended:

h3. ERTListLocations

Lists all defined locations in build.gradle

*Command line example*
{{gradle listLocations}}

h3. ERTBackup

Creates a backup of {{<source>}} to the defined backupUrl. The backup are created as a directory {{_<url path>__<datetime>}} under the {{backupUrl}}

*Command line example*
{{gradle backup -Psource=test}}

*Task definition example*
{noformat}
task backupTest(Type: Backup) {
     source = "test"
}
{noformat}

h3. ERTDiff

Compares the content of the {{<source>}} and {{<target>}} and ouputs a report of the differences.

*Command line example*
{{gradle diff -Psource=local -Ptarget=prod}}

*Task definition example*
{noformat}
task diffProd(Type: Diff) {
     source = "local"
     target = "prod"
}
{noformat}

h3. ERTSync

Resolves all differenes between the <source> and <target>, using <source> as master.

h4. Options

|| Property || Values || Descr
| testRun | true / false | If true, the sync will only display whats should be done without actually executing anything

*Command line example*
{{gradle sync -Psource=local -Ptarget=prod}}

*Task definition example*
{noformat}
task diffProd(Type: Sync) {
     source = "local"
     target = "prod"
}
{noformat}


h3. ERTNukeCache

Invalidates the cache of {{<source>}}.

*Command line example*
{{gradle nukeCache -Psource=local}}

*Task definition example*
{noformat}
task diffProd(Type: NukeCache) {
     source = "prod"
}
{noformat}

h3. ERTCopy

Copies a file or directory {{fileName}} from {{<source>}} to {{<target>>}}, will overwrite any existing files

*Command line example*
{{gradle copyToTest -PfileName=/modules/article}}

*Task definition example*

{noformat}
task copyToTest(Type: Copy) {
     source = "dev"
     target = "test"
     filenName = "/modules/article"
}
{noformat}


h2. Oxygen integration

See [ERT - Oxygen integration]

h2. Known bugs

h2. Future features / Todo

See [ERT - Todo]
